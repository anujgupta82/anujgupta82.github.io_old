---
layout: post
comments: true
title:  "Gradients - Part 1"
excerpt: "Part 1 of computing gradients for training Neural Nets"
date:   2016-08-26 15:40:00
mathjax: true
---


 #### **+ 1 layer network, 1 training example (scalar)**

Consider a simplest version of a neural net - 1 layer, 1 input node (scalar)

<div class="imgcap">
<img src="/assets/gradients/NN_1_1.jpeg" height="300" width="350">
<div class="thecap">simple neural net</div>
</div>

Input is (x,y) : x, y both are scalars. (Later on every thing will be a matrix, so just to be using same notaion. We will abuse the notation to express scalars as matrix of dimension 1 \\(\times\\) 1). Thus, in matrix form x,y are $$[X]_{\scriptscriptstyle 1\times 1}$$ and $$[y]_{\scriptscriptstyle 1\times 1}$$. Let W be weight matrix. In this case its $$[W]_{\scriptscriptstyle 1\times 1}$$

<!--
**Deriving Policy Gradients**. I'd like to also give a sketch of where Policy Gradients come from mathematically. Policy Gradients are a special case of a more general *score function gradient estimator*. The general case is that when we have an expression of the form \\(E_{x \sim p(x \mid \theta)} [f(x)] \\) - i.e. the expectation of some scalar valued score function \\(f(x)\\) under some probability distribution \\(p(x;\theta)\\) parameterized by some \\(\theta\\). Hint hint, \\(f(x)\\) will become our reward function (or advantage function more generally) and \\(p(x)\\) will be our policy network, which is really a model for \\(p(a \mid I)\\), giving a distribution over actions for any image \\(I\\). Then we are interested in finding how we should shift the distribution (through its parameters \\(\theta\\)) to increase the scores of its samples, as judged by \\(f\\) (i.e. how do we change the network's parameters so that action samples get higher rewards). We have that:
-->


Let \\( \hat{y} \\) be the predicted output. Then, $$ \hat{y} = \sigma (Wx) = \frac{1}{1 + e^{-[X] . [W]}} \label{ref0} \tag{0}$$

Let loss be squared error loss. For ease of maths we take \\( \frac{1}{2} \\) of it. $$ L  = \frac{1}{2} (y - \hat{y})^{2} $$

Let's compute gradients, $$\nabla_{W} L = \frac{\partial L}{\partial W} $$

<!---
\begin{equation}
  \frac{\partial L}{\partial W} = \frac{\partial L}{\partial \hat{y}} \times \frac{\partial \hat{y}}{\partial W} 
  \tag{1}
  \frac{\partial L}{\partial \hat{y}} &= \frac{1}{2} \times 2 \times (y - \hat{y})^{1} \times (-1) 
  \tag{a}
\end{equation}
-->

$$
\begin{align}
\frac{\partial L}{\partial W} & = \frac{\partial L}{\partial \hat{y}} \times \frac{\partial \hat{y}}{\partial W} \label{ref1} \tag{1}\\
\frac{\partial L}{\partial \hat{y}} &= \frac{1}{2} \times 2 \times (y - \hat{y})^{1} \times (-1) \label{ref2} \tag{2}\\
\frac{\partial \hat{y}}{\partial W} &= \big{(} \frac{1}{1 + e^{-[X] . [W]}} \big{)} \times \big{(}1- \frac{1}{1 + e^{-[X] . [W]}} \big{)} * -X \\
& = \sigma (Wx) \times (1- \sigma (Wx)) * -X \dots && \text{using \eqref{ref0}} \label{ref3} \tag{3}\\
& = \hat{y} \times (1- \hat{y}) * -X \dots && \text{using \eqref{ref0}} \label{ref33}\\
\end{align}
$$

Substituting \eqref{ref2} & \eqref{ref3} in \eqref{ref1}, we get 

$$
\begin{align}
\frac{\partial L}{\partial W} &= \big{(} (-1) \times (y - \hat{y}) \big{)} \times \big{(} \hat{y} \times (1- \hat{y}) \times -x \big{)}\\ \\
&= (y - \hat{y}) \times \hat{y} \times (1- \hat{y}) \times x \label{ref4} \tag{4} \\
\end{align}
$$

Let,  

\begin{align}
\Delta l_{1} = (y - \hat{y}) \times \hat{y} \times (1- \hat{y}) \label{ref5} \tag{5} \\
\end{align}


Then, eq \eqref{ref1} reduces to:	
$$ 
\begin{align}
\frac{\partial L}{\partial W} &= \Delta l_{1} \times x \\
& = \Delta l_{1} * X \\
& = [X^{T}] . \Delta l_{1} \label{ref6} \tag{6} \\
\end{align}
$$


[__Prev__](https://anujgupta82.github.io/2016/08/24/gradients-0/) [Next](https://anujgupta82.github.io/2016/08/28/gradients-2/)

<!--
<div style="text-align: right"> [Next](https://anujgupta82.github.io/2016/08/28/gradients-2/)</div>
-->






    
