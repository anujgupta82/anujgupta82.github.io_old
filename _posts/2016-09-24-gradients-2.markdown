---
layout: post
comments: true
title:  "Gradients - Part 2"
excerpt: "Part 2 of computing gradients for training Neural Nets"
date:   2016-09-24 15:40:00
mathjax: true
---



#### **1 layer network, 1 input (vector)**

Our neural net still has 1 layer, but input now is a vector. 

<div class="imgcap">
<img src="/assets/gradients/NN_2_2.jpeg" height="300" width="350">
<div class="thecap">Neural net with 1 layer, but input is vector</div>
</div>

Input is \\((\vec{X},y)\\) : \\(\vec{X}\\) is a vector, while y is a scalars. 

\\(X = [x^1 ~~x^2 ~~x^3]\\)		&nbsp; &nbsp; &nbsp; \\(x^i = i^{th}\\) component of \\(\vec{X}\\).
	


Thus, in matrix form x,y are $$[X]_{\scriptscriptstyle 1\times 3}$$ and $$[y]_{\scriptscriptstyle 1\times 1}$$. W, weight matrix is $$[W]_{\scriptscriptstyle 3 \times 1}$$

$$
\begin{equation}
     W=\begin{bmatrix}
         w_{1} \\
         w_{2} \\
         w_{3} \\
         \end{bmatrix}
\end{equation}
$$

\\( \hat{y} \\) is predicted output. In matrix format, \\([\hat{y}]_{\scriptscriptstyle 1\times 1}\\)
\\( \hat{y} = \sigma ([X] . [W]) = \frac{1}{1 + e^{-[X] . [W]}} \label{ref10} \tag{10} \\)



Like before, we will use half of squared error loss. $$ L  = \frac{1}{2} (y - \hat{y})^{2} $$

Let's compute gradients. 

$$
\begin{equation}
\nabla_{W} L = \frac{\partial L}{\partial W} \\
\nabla_{W} L = \begin{bmatrix}
     \frac{\partial L}{\partial w_{1}} \\
     \frac{\partial L}{\partial w_{2}} \\
     \frac{\partial L}{\partial w_{3}} \\
     \end{bmatrix}
\label{ref11} \tag{11}
\end{equation}
$$


So, lets compute \\( \frac{\partial L}{\partial w_{1}} \\)

$$
\begin{align}
\frac{\partial L}{\partial w_1} &= \frac{\partial L}{\partial \hat{y}} * \frac{\partial \hat{y}}{\partial w_1} \label{ref12} \tag{12} \\
\frac{\partial L}{\partial \hat{y}} &= \frac{1}{2} \times 2 \times (y - \hat{y})^{1} \times (-1) \label{ref13} \tag{13} \\
\frac{\partial \hat{y}}{\partial w_1} &= \big{(} \frac{1}{1 + e^{-[X] . [W]}} \big{)} \times \big{(}1- \frac{1}{1 + e^{-[X] . [W]}} \big{)} * x_1 \label{ref14} \tag{14}\\
& = \sigma ([X] . [W]) \times (1- \sigma ([X] . [W])) * -x_1 \dots & \text{using \eqref{ref11}} & \label{ref15} \tag{15}\\
& = \hat{y} \times (1- \hat{y}) * -x_1 \dots & \text{using \eqref{ref11}} & \label{ref16} \tag{16}\\
\end{align}
$$

Substituting \eqref{ref13} & \eqref{ref16} in \eqref{ref12}, we get 

$$
\begin{align}
\frac{\partial L}{\partial w_1} &= \big{(} (-1) \times (y - \hat{y}) \big{)} \times \big{(} \hat{y} \times (1- \hat{y}) \times -x_1 \big{)} \\
& = (y - \hat{y}) \times \hat{y} \times (1- \hat{y}) \times x_1
\end{align}
$$

Thus, in general:
$$
\begin{align}
\frac{\partial L}{\partial w_i} &= (y - \hat{y}) \times \hat{y} \times (1- \hat{y}) \times x_i \label{ref17} \tag{17}\\
\end{align}
$$

Using \eqref{ref17} in \eqref{ref11}

$$
\begin{equation}
\frac{\partial L}{\partial W} = \begin{bmatrix}
     (y - \hat{y}) \times \hat{y} \times (1- \hat{y}) \times x_1 \\
     (y - \hat{y}) \times \hat{y} \times (1- \hat{y}) \times x_2 \\
     (y - \hat{y}) \times \hat{y} \times (1- \hat{y}) \times x_3 \\
     \end{bmatrix}
\label{ref18} \tag{18}
\end{equation}
$$

$$
\begin{equation}
= [x^1 ~~x^2 ~~x^3] .
	\begin{bmatrix}
     (y - \hat{y}) \times \hat{y} \times (1- \hat{y}) \\
     (y - \hat{y}) \times \hat{y} \times (1- \hat{y}) \\
     (y - \hat{y}) \times \hat{y} \times (1- \hat{y}) \\
     \end{bmatrix}
\label{ref19} \tag{19}
\end{equation}
$$

Let,  

\begin{align}
\Delta l_{1} = (y - \hat{y}) \times \hat{y} \times (1- \hat{y}) \label{ref20} \tag{20} \\
\end{align}

Using \eqref{ref20} in \eqref{ref19}

$$ 
\begin{align}
\frac{\partial L}{\partial W} &= [X^{T}] . \Delta l_{1} \\
\end{align}
$$



<!---
Deriving Policy Gradients. I'd like to also give a sketch of where Policy Gradients come from mathematically. Policy Gradients are a special case of a more general score function gradient estimator. The general case is that when we have an expression of the form \(E_{x \sim p(x \mid \theta)} [f(x)] \) - i.e. the expectation of some scalar valued score function \(f(x)\) under some probability distribution \(p(x;\theta)\) parameterized by some \(\theta\). Hint hint, \(f(x)\) will become our reward function (or advantage function more generally) and \(p(x)\) will be our policy network, which is really a model for \(p(a \mid I)\), giving a distribution over actions for any image \(I\). Then we are interested in finding how we should shift the distribution (through its parameters \(\theta\)) to increase the scores of its samples, as judged by \(f\) (i.e. how do we change the network's parameters so that action samples get higher rewards). We have that:

$$
\begin{align}
\nabla_{\theta} E_x[f(x)] &= \nabla_{\theta} \sum_x p(x) f(x) & \text{definition of expectation} \\
& = \sum_x \nabla_{\theta} p(x) f(x) & \text{swap sum and gradient} \\
& = \sum_x p(x) \frac{\nabla_{\theta} p(x)}{p(x)} f(x) & \text{both multiply and divide by } p(x) \\
& = \sum_x p(x) \nabla_{\theta} \log p(x) f(x) & \text{use the fact that } \nabla_{\theta} \log(z) = \frac{1}{z} \nabla_{\theta} z \\
& = E_x[f(x) \nabla_{\theta} \log p(x) ] & \text{definition of expectation}
\end{align}
$$
-->






    
